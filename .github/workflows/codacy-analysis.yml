name: Codacy Analysis
on:
  workflow_call:
jobs:
  codacy-analysis:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Tam geçmişi getir
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean workspace completely
        run: |
          echo "Current workspace: $GITHUB_WORKSPACE"
          echo "Stopping any git processes..."
          pkill -f git || true
          echo "Removing all files..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          mkdir -p WfmUser-iOS
          echo "Workspace cleaned"
      
      - name: Manual git clone with token
        run: |
          echo "Attempting git clone with authentication..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          
          # Token ile repository URL'ini oluştur
          REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Cloning repository..."
          
          # Clone işlemi
          git clone "$REPO_URL" WfmUser-iOS
          cd WfmUser-iOS
          
          # Checkout specific ref if needed
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            git checkout ${{ github.sha }}
          fi
          
          echo "Clone completed successfully"
      
      - name: Verify checkout
        run: |
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git remote:"
          git remote -v
          echo "Recent commits:"
          git log --oneline -n 3
        
      - name: Verify wget installation
        run: |
          which wget
          wget --version

     # - name: Fetch Codacy issuesCount from API
     #   run: |
     #     response=$(curl -s -X GET "https://app.codacy.com/api/v3/analysis/organizations/gh/Onus-Services/repositories/WfmUser-iOS" \
     #       -H "Accept: application/json" \
     #       -H "api-token: peNJEy3SRP5Q1ZvGJiLU")

     #     issues_count=$(echo "$response" | jq '.data.issuesCount')
     #     echo "Codacy issuesCount: $issues_count"

      - name: Fetch initial Codacy issuesCount from API
        id: fetch_initial
        run: |
          response=$(curl -s -X GET "https://app.codacy.com/api/v3/analysis/organizations/gh/Onus-Services/repositories/WfmUser-iOS" \
            -H "Accept: application/json" \
            -H "api-token: peNJEy3SRP5Q1ZvGJiLU")

          issues_count=$(echo "$response" | jq '.data.issuesCount')
          echo "Initial Codacy issuesCount: $issues_count"
          echo "::set-output name=initial::$issues_count"
      
      # Codacy analiz
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          project-token: '101c14959850483ead736dda762d36cf'
          verbose: true
          max-allowed-issues: 1500
          upload: true

      - name: Fetch new Codacy issuesCount from API (with polling)
        id: fetch_new
        run: |
          initial_count="${{ steps.fetch_initial.outputs.initial }}"
          max_attempts=10
          attempt=0
          delay=10

          while [ "$attempt" -lt "$max_attempts" ]; do
            echo "Attempt $((attempt+1)) of $max_attempts..."

            response=$(curl -s -X GET "https://app.codacy.com/api/v3/analysis/organizations/gh/Onus-Services/repositories/WfmUser-iOS" \
              -H "Accept: application/json" \
              -H "api-token: peNJEy3SRP5Q1ZvGJiLU")

            issues_count=$(echo "$response" | jq '.data.issuesCount')
            echo "Fetched issuesCount: $issues_count"

            if [ "$issues_count" != "$initial_count" ]; then
              echo "New issuesCount detected: $issues_count"
              break
            fi

            echo "No change in issuesCount yet. Waiting $delay seconds..."
            sleep "$delay"
            attempt=$((attempt+1))
          done

          echo "::set-output name=new::$issues_count"

      - name: Compare issuesCount and fail if needed
        run: |
          initial=${{ steps.fetch_initial.outputs.initial }}
          new=${{ steps.fetch_new.outputs.new }}

          echo "Initial issuesCount: $initial"
          echo "New issuesCount: $new"

          diff=$((new - initial))
          echo "Difference (new - initial): $diff"

          if [ "$diff" -gt 1 ]; then
            echo "Failing: difference $diff is greater than 1"
            exit 1
          else
            echo "Success: difference $diff is not greater than 1"
          fi
