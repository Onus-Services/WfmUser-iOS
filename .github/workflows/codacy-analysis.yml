name: Codacy Analysis
on:
  workflow_call:
jobs:
  codacy-analysis:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Tam geçmişi getir
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Clean workspace completely
        run: |
          echo "Current workspace: $GITHUB_WORKSPACE"
          echo "Stopping any git processes..."
          pkill -f git || true
          echo "Removing all files..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          mkdir -p WfmUser-iOS
          echo "Workspace cleaned"
      
      - name: Manual git clone with token
        run: |
          echo "Attempting git clone with authentication..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          
          # Token ile repository URL'ini oluştur
          REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Cloning repository..."
          
          # Clone işlemi
          git clone "$REPO_URL" WfmUser-iOS
          cd WfmUser-iOS
          
          # Checkout specific ref if needed
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            git checkout ${{ github.sha }}
          fi
          
          echo "Clone completed successfully"
      
      - name: Verify checkout
        run: |
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git remote:"
          git remote -v
          echo "Recent commits:"
          git log --oneline -n 3
      
      - name: Enable IDEFileSystemSynchronizedGroups
        run: |
          export IDEFileSystemSynchronizedGroupsAreEnabled=YES
        
      - name: Set up Xcode 16.3
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'
        
      - name: Verify wget installation
        run: |
          which wget
          wget --version
      
      # Codacy analiz
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          project-token: '101c14959850483ead736dda762d36cf'
          verbose: true
          max-allowed-issues: 1500
          upload: true
      
      - name: Check commit quality
        run: |
          # Wait a moment for analysis to be processed
          sleep 10
          
          # Method 1: Try to get commit overview
          echo "Fetching commit analysis..."
          COMMIT_RESPONSE=$(curl -s -H "api-token: 101c14959850483ead736dda762d36cf" \
            "https://api.codacy.com/2.0/commit/${{ github.sha }}")
          
          echo "Commit API Response: $COMMIT_RESPONSE"
          
          if echo "$COMMIT_RESPONSE" | jq empty 2>/dev/null; then
            # Extract quality metrics if available
            GRADE=$(echo "$COMMIT_RESPONSE" | jq -r '.grade // "unknown"')
            ISSUES_COUNT=$(echo "$COMMIT_RESPONSE" | jq '.issuesCount // 0')
            
            echo "Commit Grade: $GRADE"
            echo "Total Issues: $ISSUES_COUNT"
            
            # Set reasonable thresholds
            if [ "$ISSUES_COUNT" -gt 50 ]; then
              echo "❌ Too many issues found: $ISSUES_COUNT (limit: 50)"
              exit 1
            else
              echo "✅ Issues within acceptable range: $ISSUES_COUNT/50"
            fi
          else
            echo "⚠️ Could not parse commit response, trying alternative approach..."
            
            # Method 2: Try repository overview
            REPO_RESPONSE=$(curl -s -H "api-token: 101c14959850483ead736dda762d36cf" \
              "https://api.codacy.com/2.0/repositories/${{ github.repository_owner }}/${{ github.event.repository.name }}")
            
            echo "Repository API Response: $REPO_RESPONSE"
            
            if echo "$REPO_RESPONSE" | jq empty 2>/dev/null; then
              GRADE=$(echo "$REPO_RESPONSE" | jq -r '.grade // "unknown"')
              echo "Repository Grade: $GRADE"
              echo "✅ Analysis completed, check Codacy dashboard for detailed results"
            else
              echo "⚠️ Unable to fetch quality metrics via API"
              echo "✅ Analysis uploaded to Codacy - check dashboard manually"
            fi
          fi
