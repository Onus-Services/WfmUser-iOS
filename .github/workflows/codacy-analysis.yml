name: Codacy Analysis
on:
  workflow_call:

jobs:
  codacy-analysis:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Tam geçmişi getir
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean workspace completely
        run: |
          echo "Current workspace: $GITHUB_WORKSPACE"
          echo "Stopping any git processes..."
          pkill -f git || true
          echo "Removing all files..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          mkdir -p WfmUser-iOS
          echo "Workspace cleaned"

      - name: Manual git clone with token
        run: |
          echo "Attempting git clone with authentication..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          
          # Token ile repository URL'ini oluştur
          REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Cloning repository..."
          
          # Clone işlemi
          git clone "$REPO_URL" WfmUser-iOS
          cd WfmUser-iOS
          
          # Checkout specific ref if needed
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            git checkout ${{ github.sha }}
          fi
          
          echo "Clone completed successfully"
      

      - name: Verify checkout
        run: |
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git remote:"
          git remote -v
          echo "Recent commits:"
          git log --oneline -n 3

      - name: Enable IDEFileSystemSynchronizedGroups
        run: |
          export IDEFileSystemSynchronizedGroupsAreEnabled=YES
        
      - name: Set up Xcode 16.3
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'
        
      - name: Verify wget installation
        run: |
          which wget
          wget --version

      - name: Run Codacy Analysis CLI and check for new issues
        run: |
          echo "Running Codacy CLI..."

          # CLI çıktısını JSON olarak al ve kaydet
          codacy-analysis-cli analyze \
            --project-token 101c14959850483ead736dda762d36cf \
            --output results.json \
            --format json \
            --verbose

          echo "Codacy analysis completed. Output written to results.json"

          # Yeni issue sayısını say
          NEW_ISSUES=$(jq '[.issues[] | select(.isNew == true)] | length' results.json)
          echo "New issues found: $NEW_ISSUES"

          # Sınır kontrolü
          if [ "$NEW_ISSUES" -gt 10 ]; then
            echo "❌ Too many new issues ($NEW_ISSUES). Failing the workflow..."
            exit 1
          else
            echo "✅ Acceptable number of new issues ($NEW_ISSUES)."
          fi
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

        # Codacy analiz
     # - name: Run Codacy Analysis CLI
     #   uses: codacy/codacy-analysis-cli-action@v4
     #   with:
     #     project-token: '101c14959850483ead736dda762d36cf'
     #     verbose: true
     #     max-allowed-issues: 1500
     #     upload: true
