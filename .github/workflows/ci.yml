name: Build WfmUser App
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write     

jobs:
  build:
    runs-on: self-hosted
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Tam ge√ßmi≈üi getir
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Clean workspace completely
        run: |
          echo "Current workspace: $GITHUB_WORKSPACE"
          echo "Stopping any git processes..."
          pkill -f git || true
          echo "Removing all files..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          mkdir -p WfmUser-iOS
          echo "Workspace cleaned"

      - name: Manual git clone with token
        run: |
          echo "Attempting git clone with authentication..."
          cd /Users/birol/actions-runner/_work/WfmUser-iOS/
          rm -rf WfmUser-iOS || true
          
          # Token ile repository URL'ini olu≈ütur
          REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Cloning repository..."
          
          # Clone i≈ülemi
          git clone "$REPO_URL" WfmUser-iOS
          cd WfmUser-iOS
          
          # Checkout specific ref if needed
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            git checkout ${{ github.sha }}
          fi
          
          echo "Clone completed successfully"
      

      - name: Verify checkout
        run: |
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status
          echo "Git remote:"
          git remote -v
          echo "Recent commits:"
          git log --oneline -n 3

     # - name: Install xcpretty
     #   run: |
     #     sudo gem install xcpretty

     # - name: Setup Ruby environment
     #   run: |
     #     # Homebrew Ruby kullan (eƒüer varsa)
     #     if command -v brew &> /dev/null; then
     #       echo "Installing/updating Homebrew Ruby..."
     #       brew install ruby || brew upgrade ruby
     #       export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
     #       export PATH="/opt/homebrew/lib/ruby/gems/3.0.0/bin:$PATH"
     #       echo "/opt/homebrew/opt/ruby/bin" >> $GITHUB_PATH
     #       echo "/opt/homebrew/lib/ruby/gems/3.0.0/bin" >> $GITHUB_PATH
     #     else
     #       echo "Homebrew not found, will use alternative approach"
     #     fi
          
     # - name: Install Jazzy for documentation
     #   run: |
     #     # Homebrew Ruby varsa onu kullan
     #     if command -v /opt/homebrew/opt/ruby/bin/ruby &> /dev/null; then
     #       echo "Using Homebrew Ruby"
     #       /opt/homebrew/opt/ruby/bin/gem install jazzy
     #     else
     #       echo "Trying to fix native extensions and install Jazzy"
     #       # T√ºm problematik gem'leri temizle
     #       sudo gem cleanup --verbose
     #       # Native extension'larƒ± mevcut mimari i√ßin yeniden derle
     #       sudo gem install --force ffi
     #       sudo gem install --force redcarpet
     #       sudo gem install --force sassc
     #       sudo gem install jazzy
     #     fi

      - name: Enable IDEFileSystemSynchronizedGroups
        run: |
          export IDEFileSystemSynchronizedGroupsAreEnabled=YES
        
      - name: Set up Xcode 16.3
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'
          
      - name: Setup HERE SDK directory structure
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p ThirdParty/HERESDK/heresdk/frameworks

      - name: Copy HERE SDK from local machine
        run: |
          cd $GITHUB_WORKSPACE
          cp -R /Users/birol/Desktop/heresdk/frameworks/heresdk.xcframework ThirdParty/HERESDK/heresdk/frameworks/

      - name: Check if HERE SDK exists in correct location
        run: |
          ls -la ThirdParty/HERESDK/heresdk/frameworks/
          ls -la ThirdParty/HERESDK/heresdk/frameworks/heresdk.xcframework
        
     # - name: Install dependencies
     #   run: echo "No Podfile found, skipping pod install"

     # - name: Build project (disable code signing)
     #   run: |
     #      xcodebuild clean build \
     #      -scheme WfmUser \
     #      -configuration Release \
     #      -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.4' \
     #      CODE_SIGN_IDENTITY="" \
     #      CODE_SIGNING_ALLOWED=NO \
     #      CODE_SIGNING_REQUIRED=NO | xcpretty

     # - name: Generate Documentation with Jazzy
     #   run: |
     #     # Homebrew Ruby varsa onu kullan, yoksa sistem Ruby
     #     if command -v /opt/homebrew/opt/ruby/bin/ruby &> /dev/null; then
     #       echo "Using Homebrew Ruby for Jazzy"
     #       /opt/homebrew/lib/ruby/gems/3.0.0/bin/jazzy \
     #         --clean \
     #         --min-acl internal \
     #         --module "WfmUser" \
     #         --build-tool-arguments -project,WfmUser.xcodeproj,-scheme,WfmUser,-sdk,iphonesimulator \
     #         --output docs
     #     else
     #       echo "Using system Ruby for Jazzy"
     #       jazzy \
     #         --clean \
     #         --min-acl internal \
     #         --module "WfmUser" \
     #         --build-tool-arguments -project,WfmUser.xcodeproj,-scheme,WfmUser,-sdk,iphonesimulator \
     #         --output docs
     #     fi

     # - name: Setup rclone config
     #   run: |
     #     mkdir -p ~/.config/rclone
     #     # ƒ∞√ßeriƒüi dosyaya yaz
     #     cat > ~/.config/rclone/rclone.conf << EOF
     #     ${{ secrets.RCLONE_CONF }}
     #     EOF

     #     # DOSYANIN ƒ∞√áERƒ∞ƒûƒ∞Nƒ∞ YAZDIR (DEBUG AMA√áLI - HATA AYIKLAMA SONRASI KALDIR!)
     #     echo "--- rclone.conf ƒ∞√ßeriƒüi (DEBUG ONLY!) ---"
     #     cat ~/.config/rclone/rclone.conf
     #     echo "--- rclone.conf ƒ∞√ßeriƒüi Sonu ---"   

     # - name: Read version and build from Xcode settings
     #   run: |
     #     VERSION=$(xcodebuild -project WfmUser.xcodeproj -scheme WfmUser -showBuildSettings | grep MARKETING_VERSION | awk '{print $3}')
     #     BUILD=$(xcodebuild -project WfmUser.xcodeproj -scheme WfmUser -showBuildSettings | grep CURRENT_PROJECT_VERSION | awk '{print $3}')
     #     FOLDER_NAME="v${VERSION}_${BUILD}"
     #     echo "üìÅ Version: $VERSION"
     #     echo "üì¶ Build: $BUILD"
     #     echo "üìÇ Folder Name: $FOLDER_NAME"
     #     echo "FOLDER_NAME=$FOLDER_NAME" >> "$GITHUB_ENV"

     # - name: Print FOLDER_NAME for debug
     #   run: |
     #     echo "‚úÖ Generated folder name: $FOLDER_NAME"

     # - name: Upload docs to Google Drive
     #   run: |
     #     rclone copy docs gdrive:/MOBILDOKUMANLAR/WfmUser-iOS/${{ env.FOLDER_NAME }}/Docs --create-empty-src-dirs --drive-chunk-size=64M --progress

     # - name: Run Unit Tests
     #   run: |
     #     xcodebuild test \
     #       -project WfmUser.xcodeproj \
     #       -scheme WfmUser \
     #       -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.4' \
     #       -derivedDataPath build \
     #       | tee xcodebuild_test.log | xcpretty

     # - name: Upload SnapshotTests to Google Drive
     #   run: |
     #     rclone copy "/Users/birol/actions-runner/_work/WfmUser-iOS/WfmUser-iOS/WfmUserTests/__Snapshots__/SnapshotTests" \
     #     gdrive:/MOBILDOKUMANLAR/WfmUser-iOS/${{ env.FOLDER_NAME }}/Snapshot \
     #     --create-empty-src-dirs \
     #     --drive-chunk-size=64M \
     #     --progress

      - name: Set up Java (for Codacy CLI)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          architecture: 'aarch64'
          
      - name: Download Codacy CLI (Dynamic version detection)
        run: |
          echo "üîç Finding available Codacy CLI releases..."
          
          # GitHub API'den release bilgilerini al
          echo "Fetching release information from GitHub API..."
          RELEASES_JSON=$(curl -s "https://api.github.com/repos/codacy/codacy-analysis-cli/releases" | head -20000)
          
          if [ -z "$RELEASES_JSON" ]; then
            echo "‚ùå Failed to fetch release information"
            exit 1
          fi
          
          echo "‚úÖ Release information fetched"
          
          # Available assets'leri listele (debug i√ßin)
          echo "üìã Available assets in latest releases:"
          echo "$RELEASES_JSON" | grep -o '"name": "[^"]*"' | head -20
          
          # Method 1: ARM64 macOS binary bul
          echo "üéØ Method 1: Looking for ARM64 macOS binary..."
          ARM64_URL=$(echo "$RELEASES_JSON" | grep -o '"browser_download_url": "[^"]*codacy-analysis-cli[^"]*macos[^"]*arm64[^"]*"' | head -1 | sed 's/"browser_download_url": "//;s/"//')
          
          if [ -n "$ARM64_URL" ]; then
            echo "Found ARM64 URL: $ARM64_URL"
            if curl -L -f "$ARM64_URL" -o codacy-analysis-cli; then
              chmod +x codacy-analysis-cli
              echo "‚úÖ Method 1 successful - ARM64 binary downloaded"
            else
              echo "‚ùå Method 1 download failed"
              ARM64_URL=""
            fi
          else
            echo "‚ùå Method 1: ARM64 binary not found"
          fi
          
          if [ -z "$ARM64_URL" ] || [ ! -f codacy-analysis-cli ]; then
            # Method 2: Generic macOS binary
            echo "üéØ Method 2: Looking for generic macOS binary..."
            MACOS_URL=$(echo "$RELEASES_JSON" | grep -o '"browser_download_url": "[^"]*codacy-analysis-cli[^"]*macos[^"]*"' | head -1 | sed 's/"browser_download_url": "//;s/"//')
            
            if [ -n "$MACOS_URL" ]; then
              echo "Found macOS URL: $MACOS_URL"
              if curl -L -f "$MACOS_URL" -o codacy-analysis-cli; then
                chmod +x codacy-analysis-cli
                echo "‚úÖ Method 2 successful - Generic macOS binary downloaded"
              else
                echo "‚ùå Method 2 download failed"
                MACOS_URL=""
              fi
            else
              echo "‚ùå Method 2: Generic macOS binary not found"
            fi
          fi
          
          if [ ! -f codacy-analysis-cli ]; then
            # Method 3: JAR file
            echo "üéØ Method 3: Looking for JAR file..."
            JAR_URL=$(echo "$RELEASES_JSON" | grep -o '"browser_download_url": "[^"]*\.jar[^"]*"' | head -1 | sed 's/"browser_download_url": "//;s/"//')
            
            if [ -n "$JAR_URL" ]; then
              echo "Found JAR URL: $JAR_URL"
              if curl -L -f "$JAR_URL" -o codacy-analysis-cli.jar; then
                echo '#!/bin/bash' > codacy-analysis-cli
                echo 'exec java -jar "$(dirname "$0")/codacy-analysis-cli.jar" "$@"' >> codacy-analysis-cli
                chmod +x codacy-analysis-cli
                echo "‚úÖ Method 3 successful - JAR downloaded with wrapper script"
              else
                echo "‚ùå Method 3 download failed"
                exit 1
              fi
            else
              echo "‚ùå Method 3: JAR file not found"
              exit 1
            fi
          fi
          
          echo "üéâ Codacy CLI ready!"

      - name: Verify Codacy CLI
        run: |
          echo "Checking Codacy CLI..."
          ls -la codacy-analysis-cli*
          file codacy-analysis-cli 2>/dev/null || echo "File command not available"
          
          # CLI'yi test et
          echo "Testing Codacy CLI..."
          ./codacy-analysis-cli --version || ./codacy-analysis-cli --help || echo "CLI test failed, will continue anyway"
          
          echo "Current working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

      - name: Run Codacy Analysis CLI
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          echo "Starting Codacy analysis..."
          echo "Project token is set: $([ -n "$CODACY_PROJECT_TOKEN" ] && echo "Yes" || echo "No")"
          
          # Analiz √ßalƒ±≈ütƒ±r
          ./codacy-analysis-cli analyze \
            --upload \
            --project-token $CODACY_PROJECT_TOKEN \
            --verbose \
            --commit-uuid ${{ github.sha }} \
            --parallel 2

      - name: Run Codacy Analysis with Docker
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          echo "üê≥ Running Codacy analysis with Docker..."
          echo "Project token is set: $([ -n "$CODACY_PROJECT_TOKEN" ] && echo "Yes" || echo "No")"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"
          
          # Docker ile Codacy CLI √ßalƒ±≈ütƒ±r - √ßƒ±ktƒ±yƒ± kontrol et
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/code" \
            -e CODACY_PROJECT_TOKEN="$CODACY_PROJECT_TOKEN" \
            codacy/codacy-analysis-cli:latest \
            analyze \
            --upload \
            --project-token "$CODACY_PROJECT_TOKEN" \
            --commit-uuid "${{ github.sha }}" \
            --directory /code \
            --max-allowed-issues 1000 \
            --parallel 2 \
            --format json 2>&1 | tee codacy_output.log | tail -50
          
          echo "üìä Analysis completed!"

      - name: Summarize Codacy Results
        if: always()
        run: |
          echo "=== CODACY ANALYSIS SUMMARY ==="
          
          if [ -f codacy_output.log ]; then
            echo "üìÑ Log file size: $(wc -l < codacy_output.log) lines"
            
            # Son 20 satƒ±rƒ± g√∂ster
            echo "üìã Last 20 lines of analysis:"
            tail -20 codacy_output.log
            
            # Hata varsa g√∂ster
            if grep -q "ERROR" codacy_output.log; then
              echo "‚ùå Errors found:"
              grep "ERROR" codacy_output.log | tail -5
            fi
            
            # Ba≈üarƒ± mesajƒ± varsa g√∂ster
            if grep -q -i "upload.*success\|analysis.*complete\|results.*uploaded" codacy_output.log; then
              echo "‚úÖ Upload appears successful!"
            fi
          else
            echo "‚ö†Ô∏è No log file found"
          fi
          
          echo "üîó Check your results at: https://app.codacy.com/gh/${{ github.repository }}/dashboard"
            
            
      # Fallback: Manuel CLI ile analiz (Docker ba≈üarƒ±sƒ±z olursa)
      - name: Fallback - Manual CLI Analysis
        if: failure()
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          echo "üîÑ Docker failed, trying manual CLI analysis..."
          
          # Basit curl ile en son JAR'ƒ± bul ve indir
          curl -s https://api.github.com/repos/codacy/codacy-analysis-cli/releases/latest | \
          grep "browser_download_url.*\.jar" | \
          cut -d '"' -f 4 | \
          head -1 | \
          xargs curl -L -o codacy-analysis-cli.jar
          
          if [ -f codacy-analysis-cli.jar ]; then
            echo "‚úÖ JAR downloaded successfully"
            java -jar codacy-analysis-cli.jar analyze \
              --upload \
              --project-token "$CODACY_PROJECT_TOKEN" \
              --verbose \
              --commit-uuid "${{ github.sha }}"
          else
            echo "‚ùå Failed to download Codacy CLI"
            exit 1
          fi

      - name: Log Codacy Analysis Results
        if: always()
        run: |
          echo "Codacy analysis completed"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Debug Information (on failure)
        if: failure()
        run: |
          echo "=== DEBUG INFORMATION ==="
          echo "Working directory: $(pwd)"
          echo "Environment variables:"
          env | grep -E "(GITHUB_|CODACY_)" | head -10
          echo "Codacy CLI executable check:"
          ls -la codacy-analysis-cli
          file codacy-analysis-cli
          echo "System information:"
          uname -a
          echo "Java version:"
          java -version

     # - name: Debug git status before tag creation
     #   run: |
     #      echo "Current directory: $(pwd)"
     #      echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
     #      ls -la
     #      git status
     #      git log --oneline -n 5
    
     # - name: Create Git Tag
     #   run: |
     #     git config user.name "github-actions"
     #     git config user.email "github-actions@github.com"
     #     TAG_NAME="release${{ env.FOLDER_NAME }}"
     #     git tag "$TAG_NAME"
     #     git push origin "$TAG_NAME"

     # - name: Create ExportOptions.plist
     #   run: |
     #     cat <<EOF > ExportOptions.plist
     #     <?xml version="1.0" encoding="UTF-8"?>
     #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     #     <plist version="1.0">
     #     <dict>
     #       <key>method</key>
     #       <string>app-store</string>
     #       <key>uploadBitcode</key>
     #       <false/>
     #       <key>uploadSymbols</key>
     #       <true/>
     #     </dict>
     #     </plist>
     #     EOF

            
     # - name: Archive app
     #   run: |
     #      xcodebuild archive \
     #      -project WfmUser.xcodeproj \
     #      -scheme WfmUser \
     #      -configuration Release \
     #      -sdk iphoneos18.4 \
     #      -destination 'generic/platform=iOS' \
     #      -archivePath ./build/WfmUser.xcarchive \
     #      CODE_SIGN_IDENTITY="" \
     #      CODE_SIGNING_ALLOWED=NO \
     #      CODE_SIGNING_REQUIRED=NO | tee xcodebuild_archive.log | xcpretty

     # - name: Export IPA
     #   run: |
     #     xcodebuild -exportArchive \
     #     -archivePath ./build/WfmUser.xcarchive \
     #     -exportOptionsPlist ExportOptions.plist \
     #     -exportPath ./build/export

     # - name: Upload to TestFlight
     #   env:
     #     APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
     #     APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
     #     APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
     #   run: |
     #     xcrun altool --upload-app \
     #       -f build/export/WfmUser.ipa \
     #       --type ios \
     #       --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
     #       --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
