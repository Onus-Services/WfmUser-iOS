name: Build WfmUser App
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write     

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Tam geçmişi getir

     # - name: Install xcpretty
     #   run: |
     #     sudo gem install xcpretty

     # - name: Setup Ruby environment
     #   run: |
     #     # Homebrew Ruby kullan (eğer varsa)
     #     if command -v brew &> /dev/null; then
     #       echo "Installing/updating Homebrew Ruby..."
     #       brew install ruby || brew upgrade ruby
     #       export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
     #       export PATH="/opt/homebrew/lib/ruby/gems/3.0.0/bin:$PATH"
     #       echo "/opt/homebrew/opt/ruby/bin" >> $GITHUB_PATH
     #       echo "/opt/homebrew/lib/ruby/gems/3.0.0/bin" >> $GITHUB_PATH
     #     else
     #       echo "Homebrew not found, will use alternative approach"
     #     fi
          
     # - name: Install Jazzy for documentation
     #   run: |
     #     # Homebrew Ruby varsa onu kullan
     #     if command -v /opt/homebrew/opt/ruby/bin/ruby &> /dev/null; then
     #       echo "Using Homebrew Ruby"
     #       /opt/homebrew/opt/ruby/bin/gem install jazzy
     #     else
     #       echo "Trying to fix native extensions and install Jazzy"
     #       # Tüm problematik gem'leri temizle
     #       sudo gem cleanup --verbose
     #       # Native extension'ları mevcut mimari için yeniden derle
     #       sudo gem install --force ffi
     #       sudo gem install --force redcarpet
     #       sudo gem install --force sassc
     #       sudo gem install jazzy
     #     fi

      - name: Enable IDEFileSystemSynchronizedGroups
        run: |
          export IDEFileSystemSynchronizedGroupsAreEnabled=YES
        
      - name: Set up Xcode 16.3
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'
          
      - name: Setup HERE SDK directory structure
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p ThirdParty/HERESDK/heresdk/frameworks

      - name: Copy HERE SDK from local machine
        run: |
          cd $GITHUB_WORKSPACE
          cp -R /Users/birol/Desktop/heresdk/frameworks/heresdk.xcframework ThirdParty/HERESDK/heresdk/frameworks/

      - name: Check if HERE SDK exists in correct location
        run: |
          ls -la ThirdParty/HERESDK/heresdk/frameworks/
          ls -la ThirdParty/HERESDK/heresdk/frameworks/heresdk.xcframework
        
     # - name: Install dependencies
     #   run: echo "No Podfile found, skipping pod install"

     # - name: Build project (disable code signing)
     #   run: |
     #      xcodebuild clean build \
     #      -scheme WfmUser \
     #      -configuration Release \
     #      -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.4' \
     #      CODE_SIGN_IDENTITY="" \
     #      CODE_SIGNING_ALLOWED=NO \
     #      CODE_SIGNING_REQUIRED=NO | xcpretty

     # - name: Generate Documentation with Jazzy
     #   run: |
     #     # Homebrew Ruby varsa onu kullan, yoksa sistem Ruby
     #     if command -v /opt/homebrew/opt/ruby/bin/ruby &> /dev/null; then
     #       echo "Using Homebrew Ruby for Jazzy"
     #       /opt/homebrew/lib/ruby/gems/3.0.0/bin/jazzy \
     #         --clean \
     #         --min-acl internal \
     #         --module "WfmUser" \
     #         --build-tool-arguments -project,WfmUser.xcodeproj,-scheme,WfmUser,-sdk,iphonesimulator \
     #         --output docs
     #     else
     #       echo "Using system Ruby for Jazzy"
     #       jazzy \
     #         --clean \
     #         --min-acl internal \
     #         --module "WfmUser" \
     #         --build-tool-arguments -project,WfmUser.xcodeproj,-scheme,WfmUser,-sdk,iphonesimulator \
     #         --output docs
     #     fi

     # - name: Setup rclone config
     #   run: |
     #     mkdir -p ~/.config/rclone
     #     # İçeriği dosyaya yaz
     #     cat > ~/.config/rclone/rclone.conf << EOF
     #     ${{ secrets.RCLONE_CONF }}
     #     EOF

     #     # DOSYANIN İÇERİĞİNİ YAZDIR (DEBUG AMAÇLI - HATA AYIKLAMA SONRASI KALDIR!)
     #     echo "--- rclone.conf İçeriği (DEBUG ONLY!) ---"
     #     cat ~/.config/rclone/rclone.conf
     #     echo "--- rclone.conf İçeriği Sonu ---"   

      - name: Read version and build from Xcode settings
        run: |
          VERSION=$(xcodebuild -project WfmUser.xcodeproj -scheme WfmUser -showBuildSettings | grep MARKETING_VERSION | awk '{print $3}')
          BUILD=$(xcodebuild -project WfmUser.xcodeproj -scheme WfmUser -showBuildSettings | grep CURRENT_PROJECT_VERSION | awk '{print $3}')
          FOLDER_NAME="v${VERSION}_${BUILD}"
          echo "📁 Version: $VERSION"
          echo "📦 Build: $BUILD"
          echo "📂 Folder Name: $FOLDER_NAME"
          echo "FOLDER_NAME=$FOLDER_NAME" >> "$GITHUB_ENV"

      - name: Print FOLDER_NAME for debug
        run: |
          echo "✅ Generated folder name: $FOLDER_NAME"

     # - name: Upload docs to Google Drive
     #   run: |
     #     rclone copy docs gdrive:/MOBILDOKUMANLAR/WfmUser-iOS/${{ env.FOLDER_NAME }}/Docs --create-empty-src-dirs --drive-chunk-size=64M --progress

     # - name: Run Unit Tests
     #   run: |
     #     xcodebuild test \
     #       -project WfmUser.xcodeproj \
     #       -scheme WfmUser \
     #       -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.4' \
     #       -derivedDataPath build \
     #       | tee xcodebuild_test.log | xcpretty

     # - name: Upload SnapshotTests to Google Drive
     #   run: |
     #     rclone copy "/Users/birol/actions-runner/_work/WfmUser-iOS/WfmUser-iOS/WfmUserTests/__Snapshots__/SnapshotTests" \
     #     gdrive:/MOBILDOKUMANLAR/WfmUser-iOS/${{ env.FOLDER_NAME }}/Snapshot \
     #     --create-empty-src-dirs \
     #     --drive-chunk-size=64M \
     #     --progress

      - name: Debug git status before tag creation
        run: |
           echo "Current directory: $(pwd)"
           echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
           ls -la
           git status
           git log --oneline -n 5
    
      - name: Create Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          TAG_NAME="release${{ env.FOLDER_NAME }}"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

     # - name: Create ExportOptions.plist
     #   run: |
     #     cat <<EOF > ExportOptions.plist
     #     <?xml version="1.0" encoding="UTF-8"?>
     #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
     #     <plist version="1.0">
     #     <dict>
     #       <key>method</key>
     #       <string>app-store</string>
     #       <key>uploadBitcode</key>
     #       <false/>
     #       <key>uploadSymbols</key>
     #       <true/>
     #     </dict>
     #     </plist>
     #     EOF

            
     # - name: Archive app
     #   run: |
     #      xcodebuild archive \
     #      -project WfmUser.xcodeproj \
     #      -scheme WfmUser \
     #      -configuration Release \
     #      -sdk iphoneos18.4 \
     #      -destination 'generic/platform=iOS' \
     #      -archivePath ./build/WfmUser.xcarchive \
     #      CODE_SIGN_IDENTITY="" \
     #      CODE_SIGNING_ALLOWED=NO \
     #      CODE_SIGNING_REQUIRED=NO | tee xcodebuild_archive.log | xcpretty

     # - name: Export IPA
     #   run: |
     #     xcodebuild -exportArchive \
     #     -archivePath ./build/WfmUser.xcarchive \
     #     -exportOptionsPlist ExportOptions.plist \
     #     -exportPath ./build/export

     # - name: Upload to TestFlight
     #   env:
     #     APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
     #     APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
     #     APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
     #   run: |
     #     xcrun altool --upload-app \
     #       -f build/export/WfmUser.ipa \
     #       --type ios \
     #       --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
     #       --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
